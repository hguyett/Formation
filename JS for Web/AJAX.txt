L'AJAX est un moyen de charger des données sans recharger la page, en utilisant le JavaScript. Dans une requête AJAX, les deux formats de données plébiscités sont le XML et le JSON. Mais les données au format texte ou html sont permises.

Les données reçues au format XML ont l'avantage de pouvoir être traitées avec des méthodes DOM, comme getElementById(). Le désavantage est que le XML peut se révéler assez verbeux, ce qui alourdit la taille du fichier.

Les données reçues au format JSON ont l'avantage d'être très concises, mais ne sont pas toujours très lisibles pour un humain. Un autre avantage est que les données sont accessibles en tant qu'objets littéraux.

var obj = {
        index: 'contenu'
    },
    string;

string = JSON.stringify(obj);

alert(typeof string + ' : ' + string); // Affiche : « string : {"index":"contenu"} »

obj = JSON.parse(string);

alert(typeof obj + ' : ' + obj); // Affiche : « object : [object Object] »

En php, on utilisera les fonctions json_encode() et json_decode().


    L'objet XMLHttpRequest (XHR)

Cet objet permet d'envoyer une requête (http, https, ftp, ...) et d'en réceptionner la réponse.

        Constructeur

    var xhr = new XMLHttpRequest();

        Méthodes

    xhr.open() - Préparation de la requête. Cette méthode prend 5 arguments :

    Le premier argument contient la méthode d'envoi des données, les trois méthodes principales sont GET, POST et HEAD.
    Le deuxième argument est l'URL à laquelle vous souhaitez soumettre votre requête, par exemple : 'http://mon_site_web.com'.
    Le troisième argument est un booléen facultatif dont la valeur par défaut est true. À true, la requête sera de type asynchrone, à false elle sera synchrone. Les requêtes synchrones stoppent l'exécution du script tant que la réponse n'a pas été reçue.
    Les deux derniers arguments sont à spécifier en cas d'identification nécessaire sur le site Web (à cause d'un .htaccess par exemple). Le premier contient le nom de l'utilisateur, tandis que le deuxième contient le mot de passe.

    xhr.send() - Envoie la requête. Permet de spécifier des paramètres en cas d'envoi avec la méthode POST.

    xhr.abort() - Permet de stopper l'activité. La connexion au serveur est interrompue et l'objet XHR est réinitialisé. Son utilisation est très rare, mais elle peut servir si vous avez des requêtes qui prennent bien trop de temps. /!\ Ne fonctionne qu'avec des requêtes asynchrones.

    xhr.getAllResponseHeaders() - Retourne tous les en-têtes de la réponse.
    xhr.getResonseHeader() - Retourne le contenu de l'entête spécifiée en argument.

        Événements

    readystatechange : cet événement se déclenche à chaque changement d'état pour une requête asynchrone. Elle a une valeur de 1 à 4 correspondant à ces constantes de classe :

    Constante        | Value | Description
    -----------------|-------|---------------------------------------------------------------------------------------------------------------------
    UNSENT           |   0   | L'objet XHR a été créé, mais pas initialisé (la méthode open() n'a pas encore été appelée).
    OPENED           |   1   | La méthode open() a été appelée, mais la requête n'a pas encore été envoyée par la méthode send().
    HEADERS_RECEIVED |   2   | La méthode send() a été appelée et toutes les informations ont été envoyées au serveur.
    LOADING          |   3   | Le serveur traite les informations et a commencé à renvoyer les données. Tous les en-têtes des fichiers ont été reçus.
    DONE             |   4   | Toutes les données ont été réceptionnées.

        Propriétés

    status - Cette prorpiété contient le code de roetour HTTP renvoyé suite à la requête. Le code 200 correspond à une requête traitée avec succès.
    statusText - Contient l'explication du code de status en anglais.
    responseXML - contient les données de retour sous forme d'un arbre XML (uniquement si les données étaient dans un format XML).
    /!\ Concernant le format XML, certains navigateurs exigeront que le header contienne 'Content-type: text/xml' pour parser la réponse.
    responseText - contient les données de retour sous forme d'une chaîne de caractères. Elle devra être parsée en fonction de son format.



        Transmettre des paramètres

            GET

        xhr.open('GET', 'http://mon_site_web.com/ajax.php?param1=valeur1&param2=valeur2'); // Attention a encoder les caractères avec encodeURIComponent().

                Exemple

            var value1 = encodeURIComponent(value1),
            value2 = encodeURIComponent(value2);

            xhr.open('GET', 'http://mon_site_web.com/ajax.php?param1=' + value1 + '&param2=' + value2);

            POST

        xhr.open('POST', 'http://mon_site_web.com/ajax.php');
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); // Simule l'envoi d'un formulaire.
        xhr.send('param1=' + value1 + '&param2=' + value2); // Attention a encoder les caractères avec encodeURIComponent().


        Vérifier que la requête a été traitée avec succès

    Il est nécessaire de tester l'état de la requête ainsi que le code de retour afin de s'assurer que la requête a été exécutée correctement.
    /!\ Dans le cas d'une requête synchrone, il n'y a pas d'événement car le code attend de lui même le code de retour. Dés lors, il suffit de tester de le code de retour pour s'assurer que la requête a été traitée correctement.

    xhr.addEventListener('readystatechange', function() {
        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
            // Votre code…
        }
    });


        Récupérer les données
