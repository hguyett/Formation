    Declaration

var myArray = ['One', 'Two', 'Three'];

// obsolet
var myArray = new Array('One', 'Two', 'Three');

    Static method

Array.isArray(arg); // Test if the argument is an array.

    Methods

// Used for FIFO and LIFO

myArray.push('Four'); // Add an item at the end
myArray.pop(); // Remove the last item
myArray.unshift('Zero'); // Add an item at the begining
myArray.shift(); // Remove an item at the begining
/!\ shift and unshift have a lack of performances, that's why it's preferable to use LIFO with push() and pop() instead of FIFO when manipulating huge amount of data.

// Searching

myArray.indexOf() // Search a value in the array and return the index of the first occurrence or -1.
myArray.indexOf() // Search a value in the array and return the index of the last occurrence or -1.


// Sorting

myArray.reverse() // Reverse the array.
myArray.sort() // Sort the array in alphabetical order
/!\ sort() converts numbers to string before sorting, so numbers are no more correctly sorted. To sort numbers (or anithing else then string in alphabetical order), you give a function with 2 parameters in argument. This function have to compare 2 values of the array, and return -1 if the first argument must come before the other, 1 if it must come after or 0 if they are equals.

// Manipulating multiple arrays

myArray.concat() // Concatenate the array with another.
myArray.slice() // Return a subarray. The first argument is the index where the subarray start, and the second is optional and is the index where the subarray end.
myArray.splice() // Remove a subarray and replace it (can also be used only to remove or to insert data in an array). The first argument is the index where start the subarray to remove. The second is the number of elements to remove. the others is what to insert in place of what is going to be removed. Splice also returns the removed subarray.


        Exemples

            sort()

        var myArray = [3, 1, 5, 10, 4, 2];

        myArray.sort(function(a, b) {

            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }

            alert(myArray); // Display : 1,2,3,4,5,10
        });


            splice()

        var myArray = [1, 8, 9, 10, 4, 5];

        var removed = myArray.splice(1, 3, 2, 3);

        alert(myArray); // Display : 1,2,3,4,5
        alert(removed); // Display : 8,9,10



    Properties

length


    Run through an array

for (var i = 0; i < myArray.length; i++) {

    alert(myArray[i]);

}

OR IF ARRAY LENGTH IS FIXED

for (var i = 0, c = myArray.length; i < c; i++) {

    alert(myArray[i]);

}


    Use forEach

var myArray = ["C'est", "un", "test"];

myArray.forEach(function(value, index, array) {
    // array[index] = value
    // Will be executed once per value in the array
});
