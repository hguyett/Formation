/!\ Le timestamp en Javascript est exprmimé en millisecondes. En PHP, il est exprimé en secondes. Son coté pratique est qu'il est facilement utilisable pour calculer la rapidité d'exécution d'une partie d'un script.


    L'objet Date

        Utilisations du constructeur

    new Date();
    new Date(timestamp);
    new Date(dateString); // Cf. parse()
    new Date(année, mois, jour [, heure, minutes, secondes, millisecondes ]);


        Méthodes statiques

    now() : retourne le timestamp correspondant au temps courant.
    Date.UTC(année,mois[,jour[,heures[,minutes[,secondes[,ms]]]]]) : accepte les mêmes paramètres que le constructeur (de 2 à 7) et retourne le timestamp correspondant.
    parse() : Cette méthode prend en unique paramètre une chaîne de caractères représentant une date et renvoie le timestamp associé. La chaine doit respecter les formats de la rfc 3339. En voici un : Sat, 04 May 1991 20:00:00 GMT+02:00
    https://www.ietf.org/rfc/rfc3339.txt

        Méthodes

    getFullYear() : renvoie l'année sur 4 chiffres ;
    getMonth() : renvoie le mois (0 à 11) ;
    getDate() : renvoie le jour du mois (1 à 31) ;
    getDay() : renvoie le jour de la semaine (0 à 6, la semaine commence le dimanche) ;
    getHours() : renvoie l'heure (0 à 23) ;
    getMinutes() : renvoie les minutes (0 à 59) ;
    getSeconds() : renvoie les secondes (0 à 59) ;
    getMilliseconds() : renvoie les millisecondes (0 à 999).
    getTime() : renvoie le timestamp.

    NB : Il existe une méthode similaire de type "set" pour chacune de ces méthodes.


    L'éxécution de code en différé ou a interval régulier

setTimeout() : Permet d'exécuter une portion de code après un laps de temps donné. Le premier argument est une fonction et le second est une durée en millisecondes. Il est possible de passer plus d'arguments à setTimeout. Dans ce cas, ils seront transférés à la fonction exécutée.
setInterval() : Permet d'exécuter une portion de code à intervalle régulier. Le premier argument est une fonction et le second est une durée en millisecondes. Il est possible de passer plus d'arguments à setInterval. Dans ce cas, ils seront transférés à la fonction exécutée.

Il est préférable d'utiliser setTimeout() dans une boucle plutôt que setInterval car celui-ci est moins stable.

NB : Si le temps spécifié est inférieur à 10ms, il est probable que le navigateur ne puisse le gérer et ne déclenche l'exécution qu'au bout de 10ms.

clearTimeout() : Annule l'exécution d'une fonction en différé établie par setTimeout. Prend un argument : l'indentifiant de l'action temporelle à annuler. Cet identifiant est retourné par setTimeout.
clearInterval() : Annule l'exécution d'une fonction à interval réguiler établie par setInterval. Prend un argument : l'indentifiant de l'action temporelle à annuler. Cet identifiant est retourné par setInterval.


    Créer des animations

Pour créer une animation, il est nécessaire d'exécuter une action de manière progressive, comme par exemple modifier l'opacité d'une image.

    Exemple

https://course.oc-static.com/ftp-tutos/cours/javascript/part3/chap6/ex3.html

var myImg = document.getElementById('myImg');

function anim() {

    var s = myImg.style,
        result = s.opacity = parseFloat(s.opacity) - 0.1;

    if (result > 0.2) {
        setTimeout(anim, 50); // La fonction anim() fait appel à elle-même si elle n'a pas terminé son travail
    }

}

anim(); // Et on lance la première phase de l'animation
