    DOM-2

La technique la plus actuelle et celle qui doit être utilisée aujourd'hui.

Pour ajouter un événement avec le DOM-2, on récupère l'élément html auquel on veut attribuer l'événement. On utilise ensuite la méthode addEventListener() sur l'élément. Cette méthode prend 3 arguments : le premier est le nom de l'événement sous forme d'un string, le second est une fonction (éventuellement anonyme) contenant le script a exécuter. Le troisième est optionnel, il s'agit d'un booléen spécifiant si le script doit s'exécuter lors de la phase de capture (true) ou de bouillonement (false, comportement par défaut). Il est possible d'attacher plusieurs événements à un élément. Dans ce cas l'ordre d'exécution peut être aléatoire.
doc : https://www.w3.org/TR/DOM-Level-3-Events/#event-flow

Pour supprimer un événement, on utilise la méthode element.removeEventListener(). Cette méthode prend 2 paramètres : le premier est le nom de l'événement sous forme d'un string, le second est la référence à la fonction qui lui est liée. Ce deuxième argument peut parfois poser problème : si l'événement à été ajouté avec une fonction anonyme, il est possible de ne pas en posséder la référence. Dans ce cas, il faut cloner l'élément puis le remplacer par son clone : le clonage ne clone pas les événements.

        Exemple

    <span id="clickme">Cliquez-moi !</span>

    <script>
        var element = document.getElementById('clickme');

        element.addEventListener('click', function() {
            alert("Vous m'avez cliqué !");
        });
    </script>


        Utilisation de l'objet Event

    L'objet event permet de récupérer une multitude d'informations lorsqu'un événement est déclenché comme les touches enfoncées, les coordonnées du cursueur, l'élément qui a déclenché l'événement, etc.

            Exemple

        element.addEventListener('click', function(e) { // L'argument « e » va récupérer une référence vers l'objet « Event »
        alert(e.type); // Ceci affiche le type de l'événement (click, mouseover, etc.)
        });



            Propriétés de l'objet Event

        target : référence vers l'élément dont l'événement a été déclenché (exactement comme le this pour les événements sans le DOM ou avec DOM-0).
        currentTarget : référence vers l'élément à l'origine du déclenchement de l'événement. Il diffère de Target dans certaines situations car certains événements sont propagés aux éléments enfants comme 'click', 'mouseover', 'mouseout', 'mousemove', ... Dans ce cas, target renverra l'élément enfant (c'est sur lui que l'événement a été déclenché) mais currentTarget renverra l'élément parent (c'est sur lui qu'a été défini l'événement).
        relatedTarget : ne s'utilise qu'avec les événements 'mouseout' et 'mouseover'. Avec l'événement mouseout, la propriété contient l'objet de l'élément sur lequel le cureseur vient d'arriver. Avec mousover, elle fournira l'objet de l'élément dont le curseur vient de sortir.
        https://course.oc-static.com/ftp-tutos/cours/javascript/part2/chap3/ex16.html
        clientX et clientY : position du curseur par rapport au coin supérieur gauche de la fenêtre.
        keyCode, keyChar et which : Renvoie le code ASCII d'une touche (s'utilise avec les événements keydown, keypress et keyup). Pour récupérer le caractère, il faudra utiliser String.fromCharCode() (à n'utiliser qu'avec keypress afin d'éviter de tenter d'encoder une touche spéciale).
        returnValue : défini la valeur de retour de l'événement.

            Méthodes de l'objet Event

        preventDefault : bloque l'action par défaut de l'événement (par exemple, la redirection en cliquant sur un lien).


            Limiter l'événement mouseout et mouseover au parent

        La solution consiste à remonter tout le long de ses éléments parents jusqu'à tomber soit surmyDiv, soit sur l'élément <body> qui désigne l'élément HTML le plus haut dans notre document. Il va donc nous falloir une boucle.

        myDiv.addEventListener('mouseover', function(e) {

            var relatedTarget = e.relatedTarget;

            while (relatedTarget != myDiv && relatedTarget.nodeName != 'BODY' && relatedTarget != document) {
                relatedTarget = relatedTarget.parentNode;
            }

            if (relatedTarget != myDiv) {
                results.innerHTML += "Le curseur vient d'entrer.";
            }

        });


        myDiv.addEventListener('mouseout', function(e) {

            var relatedTarget = e.relatedTarget;

            while (relatedTarget != myDiv && relatedTarget.nodeName != 'BODY' && relatedTarget != document) {
                relatedTarget = relatedTarget.parentNode;
            }

            if (relatedTarget != myDiv) {
                results.innerHTML += "Le curseur vient de sortir.<br />";
            }

        });

    DOM-0

DOM-0 est une veille interface implémentée par Netscape.

Le mot clé this pointant sur l'objet en cours d'utilisation, il peut être utilisé lors d'événements (il pointera alors vers l'élément HTML).

Pour ajouter un événement avec le DOM-0, on récupère l'élément html auquel on veut attribuer l'événement. On lui ajoute ensuite une propriété nommée "on" + event_name à laquelle on assigne une fonction (éventuellement anonyme) contenant le script. Pour supprimer l'événement, il suffit alors d'attribuer une fonction anonyme vide.

/!\ Il existe une pratique qui consiste a ajouter son script dans l'attribut href d'une balise <a>. Ceci est déconseillé. Il est préférable d'ajouter un événement onclick, voire même d'utiliser un bouton, les liens ne devant être utilisés que pour une redirection. Il est possible d'empêcher la redirection du lien en retournant false à la fin du script.

        Exemple

    <span id="clickme">Cliquez-moi !</span>

    <script>

    var element = document.getElementById('clickme');

    element.onclick = function() {
    alert("Vous m'avez cliqué !");
    };

    </script>

        Utilisation de l'objet Event avec le DOM-0

    element.onclick = function(e) { // L'argument « e » va récupérer une référence vers l'objet « Event »
        alert(e.type); // Ceci affiche le type de l'événement (click, mouseover, etc.)
    };


    Les événements sans le DOM

Le mot clé this pointant sur l'objet en cours d'utilisation, il peut être utilisé lors d'événements (il pointera alors vers l'élément HTML).

Pour ajouter un événement sans utiliser le DOM, il faut ajouter à l'élément HTML un attribut nommé "on" + event_name qui aura pour valeur le script a exécuté entre guillemets.

<span onclick="alert('Voici le contenu de l\'élément que vous avez cliqué :\n\n' + this.innerHTML);">Cliquez-moi !</span>

/!\ Il existe une pratique qui consiste a ajouter son script dans l'attribut href d'une balise <a>. Ceci est déconseillé. Il est préférable d'ajouter un événement onclick, voire même d'utiliser un bouton, les liens ne devant être utilisés que pour une redirection. Il est possible d'empêcher la redirection du lien en retournant false à la fin du script.

<a href="#" onclick="alert('Vous avez cliqué !'); return false;">Cliquez-moi !</a>






    Liste des événements

        click

    Cliquer (appuyer puis relâcher) sur l'élément

        dblclick

    Double-cliquer sur l'élément

        mouseover

    Faire entrer le curseur sur l'élément. Hérité par les éléments enfants.

        mouseout

    Faire sortir le curseur de l'élément. Hérité par les éléments enfants.

        mousedown

    Appuyer (sans relâcher) sur le bouton gauche de la souris sur l'élément

        mouseup

    Relâcher le bouton gauche de la souris sur l'élément

        mousemove

    Faire déplacer le curseur sur l'élément. Hérité par les éléments enfants.

        keydown

    Appuyer (sans relâcher) sur une touche de clavier sur l'élément. Détecte chaque saisie (pas de combinaison) -> renvoie toujours une majuscule.

        keyup

    Relâcher une touche de clavier sur l'élément. Détecte chaque saisie (pas de combinaison) -> renvoie toujours une majuscule.

        keypress

    Frapper (appuyer puis relâcher) une touche de clavier sur l'élément. Détecte les combinaisons de touches, ce qui implique que la pression d'une touche spéciale n'est pas retournée.

        focus

    « Cibler » l'élément

        blur

    Annuler le « ciblage » de l'élément

        change

    Changer la valeur d'un élément spécifique aux formulaires (input,checkbox, etc.)

        input

    Taper un caractère dans un champ de texte (son support n'est pas complet sur tous les navigateurs)

        select

    Sélectionner le contenu d'un champ de texte (input,textarea, etc.)

        submit

    Envoyer le formulaire

        reset

    Réinitialiser le formulaire
