    Polyfill

Un polyfill consiste à implémenter une méthode native dans le cas où elle ne serait pas supporter par l'un ou l'autre navigateur, ceci en toute transparence. Il est très rare de devoir soi-même créer un polyfill : quand une fonction pose problème, on trouvera facilement un polyfill dans la documentation MDN ou sur le reste du net.

        Exemples

    if (!String.prototype.trim) {
      String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
      };
    }

    if (!Array.isArray) {
      Array.isArray = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
      };
    }

    forEach() : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill


    Wrapper

Un wrapper consiste à réimplémenter un objet natif afin de lui ajouter des fonctionnalités sans modifier directement l'objet natif afin d'éviter de modifier une méthode existante. Un wrapper est donc un code qui a pour but d'encadrer l'utilisation de certains éléments du JavaScript. Il peut ainsi contrôler la manière dont ils sont employés et peut réagir en conséquence pour fournir des fonctionnalités supplémentaires aux développeurs.

Voici un exemple de Wrapper réimplémentant l'objet Image afin d'assurer le bon fonctionnement de sa propriété "complete" :


function Img(src) {

    var obj = this; // Nous faisons une petite référence vers notre objet Img. Cela nous facilitera la tâche.

    this.originalImg = new Image(); // On instancie l'objet original, le wrapper servira alors d'intermédiaire

    this.complete = false;
    this.onload = function() {}; // Voici l'événement que les développeurs pourront modifier

    this.originalImg.onload = function() {

        obj.complete = true; // L'image est chargée !
        obj.onload(); // On exécute l'événement éventuellement spécifié par le développeur

    };

    if (src) {
        this.originalImg.src = src; // Si elle est spécifiée, on défini alors la propriété src
    }

}

Img.prototype.set = function(name, value) {

    var allowed = ['width', 'height', 'src'], // On spécifie les propriétés dont on autorise la modification
        wrapperProperties = ['complete', 'onload'];

    if (allowed.indexOf(name) != -1) {
        this.originalImg[name] = value; // Si la propriété est autorisée alors on la modifie
    } else if (wrapperProperties.indexOf(name) != -1) {
        this[name] = value; // Ici, la propriété appartient au wrapper et non pas à l'objet original
    }

};

Img.prototype.get = function(name) {

    // Si la propriété n'existe pas sur le wrapper, on essaye alors sur l'objet original :
    return typeof this[name] != 'undefined' ? this[name] : this.originalImg[name];

};
