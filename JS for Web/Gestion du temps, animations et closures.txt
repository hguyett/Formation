/!\ Le timestamp en Javascript est exprmimé en millisecondes. En PHP, il est exprimé en secondes. Son coté pratique est qu'il est facilement utilisable pour calculer la rapidité d'exécution d'une partie d'un script.


    L'objet Date

        Utilisations du constructeur

    new Date();
    new Date(timestamp);
    new Date(dateString); // Cf. parse()
    new Date(année, mois, jour [, heure, minutes, secondes, millisecondes ]);


        Méthodes statiques

    now() : retourne le timestamp correspondant au temps courant.
    Date.UTC(année,mois[,jour[,heures[,minutes[,secondes[,ms]]]]]) : accepte les mêmes paramètres que le constructeur (de 2 à 7) et retourne le timestamp correspondant.
    parse() : Cette méthode prend en unique paramètre une chaîne de caractères représentant une date et renvoie le timestamp associé. La chaine doit respecter les formats de la rfc 3339. En voici un : Sat, 04 May 1991 20:00:00 GMT+02:00
    https://www.ietf.org/rfc/rfc3339.txt

        Méthodes

    getFullYear() : renvoie l'année sur 4 chiffres ;
    getMonth() : renvoie le mois (0 à 11) ;
    getDate() : renvoie le jour du mois (1 à 31) ;
    getDay() : renvoie le jour de la semaine (0 à 6, la semaine commence le dimanche) ;
    getHours() : renvoie l'heure (0 à 23) ;
    getMinutes() : renvoie les minutes (0 à 59) ;
    getSeconds() : renvoie les secondes (0 à 59) ;
    getMilliseconds() : renvoie les millisecondes (0 à 999).
    getTime() : renvoie le timestamp.

    NB : Il existe une méthode similaire de type "set" pour chacune de ces méthodes.


    L'éxécution de code en différé ou a interval régulier

setTimeout() : Permet d'exécuter une portion de code après un laps de temps donné. Le premier argument est une fonction et le second est une durée en millisecondes. Il est possible de passer plus d'arguments à setTimeout. Dans ce cas, ils seront transférés à la fonction exécutée.
setInterval() : Permet d'exécuter une portion de code à intervalle régulier. Le premier argument est une fonction et le second est une durée en millisecondes. Il est possible de passer plus d'arguments à setInterval. Dans ce cas, ils seront transférés à la fonction exécutée.

Il est préférable d'utiliser setTimeout() dans une boucle plutôt que setInterval car celui-ci est moins stable.

NB : Si le temps spécifié est inférieur à 10ms, il est probable que le navigateur ne puisse le gérer et ne déclenche l'exécution qu'au bout de 10ms.

clearTimeout() : Annule l'exécution d'une fonction en différé établie par setTimeout. Prend un argument : l'indentifiant de l'action temporelle à annuler. Cet identifiant est retourné par setTimeout.
clearInterval() : Annule l'exécution d'une fonction à interval réguiler établie par setInterval. Prend un argument : l'indentifiant de l'action temporelle à annuler. Cet identifiant est retourné par setInterval.


    Créer des animations

Pour créer une animation, il est nécessaire d'exécuter une action de manière progressive, comme par exemple modifier l'opacité d'une image.

    Exemple

https://course.oc-static.com/ftp-tutos/cours/javascript/part3/chap6/ex3.html

var myImg = document.getElementById('myImg');

function anim() {

    var s = myImg.style,
        result = s.opacity = parseFloat(s.opacity) - 0.1;

    if (result > 0.2) {
        setTimeout(anim, 50); // La fonction anim() fait appel à elle-même si elle n'a pas terminé son travail
    }

}

anim(); // Et on lance la première phase de l'animation


    Closure

Les closures sont des fonctions définies à l'intérieurs d'autres fonctions. Elles permettent de résoudre des problèmes particuliers en définissant des variables dans un autre espace d'exécution (espace fonctionnel) que l'espace courant. Les problèmes résolus par les closures sont liés à l'exécution différée du code (utilisation de setTimeout et setInterval) utilisant des références vers des variables qui sont modifiées avant l'exécution différée.
https://developer.mozilla.org/fr/docs/Web/JavaScript/Closures

        Démonstration du problème

    var number = 1;

    setTimeout(function() {
        alert(number);
    }, 100);

    number++;
    // Ce code affichera 2 : la variable number passée en référence à la fonction anonyme est modifiée avant l'exécution différée.

    // Prenons ici un code qui devrait récupérer un ensemble de balises div cachées et les afficher progressivement.
    var divs = document.getElementsByTagName('div'),
    divsLen = divs.length;

    for (var i = 0; i < divsLen; i++) {

        setTimeout(function() {
            divs[i].style.display = 'block';
        }, 200 * i); // Le temps augmentera de 200 ms à chaque élément

    }
    // Ce code ne fonctionne pas : la variable i a pour valeur divsLen (soit sa valeur en sortie de boucle). Encore une fois, le problème vient du fait qu'elle a été passée par référence et a été modifiée avant l'exécution du code en différé.

    Ceci nous ramène au même problème : notre fonction anonyme ne prend en compte que la valeur finale de notre variable. Heureusement, il existe les closures, qui peuvent contourner ce désagrément !

        Utilisation des closures

    var divs = document.getElementsByTagName('div'),
        divsLen = divs.length;

    for (var i = 0; i < divsLen; i++) {

        (function() {

            var currentI = i;

            setTimeout(function() {
                divs[currentI].style.display = 'block';
            }, 200 * i);

        })();

    }
    // La variable currentI est désormais définie dans un espace fonctionnel différent de celui de i. L'espace fonctionnel de currentI a accès à la variable i, MAIS L'INVERSE N'EST PAS VRAI. à chaque itération de la boucle, un espace fonctionnel différent est créé. chaque variable currentI est donc différente : à chaque itération, une nouvelle variable est créée et dispose d'une autre référence, car ces variables n'existent pas dans le même espace fonctionnel. Ainsi, à chaque itération de la boucle, le code différé dispose d'une référence vers une variable qui lui est propre et qui ne peut être modifiée dans l'espace global.

    var divs = document.getElementsByTagName('div'),
        divsLen = divs.length;

    for (var i = 0; i < divsLen; i++) {

        (function(i) {

            setTimeout(function() {
                divs[i].style.display = 'block';
            }, 200 * i);

        })(i); // /i\ la variable est passée en argument ici

    }
    // Ce code revient au même que le précédent. La différence étant que la variable i a été passée en argument à la fonction anonyme. Il existe de nombreuses autres manières d'écrire des closures.

    NB : les variables existent tant qu'une référence vers ces variables existent. Donc tant que le code différé n'a pas été exécuté, la variable currentI qui lui est liée existe. Une fois son exécution terminée, la variable n'est plus référencée et est donc détruite.

        Créer des variables statiques à l'aide des closures

    var display = (function() {

        var myVar = 0; // Déclaration de la variable pseudo-statique

        return function(value) {

            if (typeof value != 'undefined') {
                myVar = value;
            }

            alert(myVar);

        };

    })();

    display(); // Affiche : 0
    display(42); // Affiche : 42
    display(); // Affiche : 42
