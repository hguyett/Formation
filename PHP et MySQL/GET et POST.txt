GET et POST permettent de faire transiter des données d'une page à l'autre.

    GET

GET fera transiter les informations en paramètres de l'URL, ce qui les rend facilement modifiables par l'utilisateur.

Exemple :
http://monsite.com/index.php?nom=Dupont&prenom=Jean
(/!\ En HTML, & doit être noté &amp;)

On récupère ces informations via le tableau associatif $_GET.
Dans cet exemple, $_GET['nom'] vaudra "Jean".

    POST

La méthode POST ne fait pas transiter les informations par l'URL, ce qui permet d'en faire transiter autant qu'on le souhaite.
On récupère ces informations via le tableau associatif $_POST.

    Sécurité

Il est très important de tester rigoureusement les variables qui transitent par la méthode GET et POST pour des raisons de sécurité.
/!\ IL NE FAUT PAS FAIRE PLUS CONFIANCE À LA MÉTHODE POST QU'À LA MÉTHODE GET.

La fonction PHP isset() permet de vérifier qu'une variable existe.
Il est possible de transtyper (caster) les variables pour s'assurer qu'elles soient du bon type.
Il est possible de transformer les caractères spéciaux en entités html grâce à la fonction htmlspecialchars() et htmlentities(). Cf. https://secure.php.net/manual/en/function.htmlentities.php et commentaires

    Données renvoyées par les formulaires

        Zones de texte monoligne, multilignes et mot de passes

    L'entrée de l'utilisateur est récupérée tel quel.

        Liste déroulante

    La valeur de l'attribut "value" est renvoyée, avec comme clé la valeur de l'attribut "name" de la balise select.

        Cases à cocher

    Si la case est cochée, le string 'on' est renvoyé avec comme clé la valeur de l'attribut "name" de la case.
    La méthode isset() peut être utilisée pour savoir si la case est cochée.

        Boutons radio

    La valeur de l'attribut "value" du bouton est renvoyée, avec comme clé la valeur de l'atribut "name" de bouton (ce qui correspond au nom du groupe de boutons).
    Attention à gérer le cas où aucun bouton n'est coché (il est également possible de cocher un bouton par défaut).

        Les fichiers uploadés

        Pour un tutoriel complet : https://openclassrooms.com/courses/upload-de-fichiers-par-formulaire

    Une fois le fichier reçu par le serveur, celui-ci est placé dans un répertoire temporaire. On peut ainsi le tester afin de le valider.
    Si le fichier est validé, il faut utiliser la méthode move_uploaded_file() pour l'accepter de manière définitive.

            Tester le fichier

        Pour chaque fichier envoyé, une variable $_FILES['nom_du_champ_input'] est créée.
        Cette variable est un tableau qui contient plusieurs informations sur le fichier :

        $_FILES['monfichier']['name'] : Contient le nom du fichier envoyé par le visiteur.
        $_FILES['monfichier']['type'] : Indique le type du fichier envoyé. Si c'est une image gif par exemple, le type sera image/gif.
        $_FILES['monfichier']['size'] : Indique la taille du fichier envoyé. Attention : cette taille est en octets. Il faut environ 1 000 octets pour faire 1 Ko, et 1 000 000 d'octets pour faire 1 Mo.
        Attention : la taille de l'envoi est limitée par PHP. Par défaut, impossible d'uploader des fichiers de plus de 8 Mo.
        $_FILES['monfichier']['tmp_name'] : Juste après l'envoi, le fichier est placé dans un répertoire temporaire sur le serveur en attendant que votre script PHP décide si oui ou non il accepte de le stocker pour de bon. Cette variable contient l'emplacement temporaire du fichier (c'est PHP qui gère ça).
        $_FILES['monfichier']['error'] : Contient un code d'erreur permettant de savoir si l'envoi s'est bien effectué ou s'il y a eu un problème et si oui, lequel. La variable vaut 0 s'il n'y a pas eu d'erreur.

            Valider et enregistrer le fichier

        move_uploaded_file($_FILES['monfichier']['tmp_name'], 'uploads/' . basename($_FILES['monfichier']['name']));
        echo "L'envoi a bien été effectué !";

        /!\ PHP doit disposer des droits suffisants que pour écrire dans le dossier uploads.

            Exemple de test de fichier :

        <?php
        // Testons si le fichier a bien été envoyé et s'il n'y a pas d'erreur
        if (isset($_FILES['monfichier']) AND $_FILES['monfichier']['error'] == 0)
        {
                // Testons si le fichier n'est pas trop gros
                if ($_FILES['monfichier']['size'] <= 1000000)
                {
                        // Testons si l'extension est autorisée
                        $infosfichier = pathinfo($_FILES['monfichier']['name']);
                        $extension_upload = $infosfichier['extension'];
                        $extensions_autorisees = array('jpg', 'jpeg', 'gif', 'png');
                        if (in_array($extension_upload, $extensions_autorisees))
                        {

                        }
                }
        }
        ?>
