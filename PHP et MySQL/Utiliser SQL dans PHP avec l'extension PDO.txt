Il existe trois groupes de méthodes pour se connecter à une base de donnée MySQL avec PHP :
mysql_ : Ces méthodes sont obsolètes, il est recommandé de ne plus les utiliser.
mysqli_ : Ces méthodes offrent plus de fonctionnalités et sont à jour.
PDO : Il s'agit des méthodes les plus récentes. Elles ont l'avantage de s'adapter à toutes les bases de données. C'est celles que nous utiliserons.


    Se connecter à la base de données

$database = new PDO('mysql:host=localhost;dbname=test;charset=utf8', 'root', '');
Le premier paramètre (qui commence par mysql) s'appelle le DSN : Data Source Name. C'est généralement le seul qui change en fonction du type de base de données auquel on se connecte.
La connexion doit être établie sur chaque page php utilisant la base de données.

$database = new PDO('mysql:host=localhost;dbname=test;charset=utf8', 'username', 'password', array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION));
Cette connexion permet d'afficher les erreurs SQL.


    Gérer les erreurs MySQL

try
{
	$database = new PDO('mysql:host=localhost;dbname=test;charset=utf8', 'root', '');
}
catch (Exception $e)
{
        die('Erreur : ' . $e->getMessage());
}


    Utilisation des transactions

Les transactions permmettent d'effectuer plusieurs requêtes SQL sur une base de TOUT OU RIEN. Elles offrent les 4 fonctionnalités majeures à une bonne gestion de base de données : Atomicité, Consistance, Isolation et Durabilité (ACID).

https://secure.php.net/manual/fr/pdo.transactions.php


    Envoyer une requête

<?php
    //Cette requête renvoie des informations.
    $data = $database->query('Tapez votre requête SELECT ici');
?>

<?php
    //Cette requête renvoie le nombre de lignes affectées.
    $database->exec('Tapez votre requête UPDATE ici');
?>

    Envoyer une requête préparée

Afin d'empêcher les injections SQL, si l'on souhaite insérer une valeur provenant d'un formulaire ou d'une entrée utilisateur dans la requête, il faut créer une requête préparée. De plus, ce systême permet d'effectuer facilement plusieurs requêtes en y changeant quelques arguments.

        Préparer la requête
    <?php
        $query = $database->prepare('SELECT fields FROM table WHERE field = ? AND anotherField <= ?');
    ?>

    <?php
        $query = $database->prepare('SELECT fields FROM table WHERE field = :this AND anotherField <= :that');
        //Cette méthode permet d'utiliser un tableau associatif, ce qui est pratique quand il y a beaucoup de paramètres.
    ?>

        Exécuter la requête

    <?php
        $query->execute(array($_GET[something], $somethingElse))
    ?>

    <?php
        $query->execute(array('this' => $_GET[something], 'that' => $somethingElse))
        //Cette méthode permet d'utiliser un tableau associatif, ce qui est pratique quand il y a beaucoup de paramètres. Dans ce cas, l'ordre n'a plus d'importance.
    ?>

    Lire le résultat d'une requête


while ($data_record = $data->fetch())
{
    echo '<p>' . $data_record['field'] . '</p>'
}
$data->closeCursor(); //Cette ligne provoque la fermeture du curseur d'analyse de résultats. Elle est éssentielle au bon déroulement du traitement de la prochaine requête car elle libère la connexion au serveur.

La méthode fetch() permet de lire la réponse de la base de données ligne par ligne. Fetch vaut "False" si aucune ligne n'est présente, ce qui quitte la boucle.

    Les arguments de la méthode fetch()

La méthode fetch() retourne par défaut un tableau associatif contenant, pour chaque entrée dans la base de données, le numéro du champ suivi de son contenu, mais également le nom du champ suivi de son contenu (il envoie donc les inforamtions en double). Il est possible de passer un argument à la méthode afin de changer ce comportement.

PDO::FETCH_ASSOC: retourne un tableau indexé par le nom de la colonne comme retourné dans le jeu de résultats

PDO::FETCH_BOTH (défaut): retourne un tableau indexé par les noms de colonnes et aussi par les numéros de colonnes, commençant à l'index 0, comme retournés dans le jeu de résultats

PDO::FETCH_BOUND: retourne TRUE et assigne les valeurs des colonnes de votre jeu de résultats dans les variables PHP à laquelle elles sont liées avec la méthode PDOStatement::bindColumn()

PDO::FETCH_CLASS: retourne une nouvelle instance de la classe demandée, liant les colonnes du jeu de résultats aux noms des propriétés de la classe. Si fetch_style inclut PDO::FETCH_CLASS (c'est-à-dire PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE), alors le nom de la classe est déterminé à partir d'une valeur de la première colonne.
/!\ Pour instancier correctement les objets, il est recommandé d'utiliser cette valeur avec PDO::FETCH_PROPS_LATE. Sinon, l'objet est créé, les propriétés lui sont assignées, et ensuite l'objet est construit.
<?php
    $query->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'MyClass');
?>

PDO::FETCH_INTO : met à jour une instance existante de la classe demandée, liant les colonnes du jeu de résultats aux noms des propriétés de la classe

PDO::FETCH_LAZY : combine PDO::FETCH_BOTH et PDO::FETCH_OBJ, créant ainsi les noms des variables de l'objet, comme elles sont accédées

PDO::FETCH_NAMED : retourne un tableau de la même forme que PDO::FETCH_ASSOC, excepté que s'il y a plusieurs colonnes avec les mêmes noms, la valeur pointée par cette clé sera un tableau de toutes les valeurs de la ligne qui a ce nom comme colonne

PDO::FETCH_NUM : retourne un tableau indexé par le numéro de la colonne comme elle est retourné dans votre jeu de résultat, commençant à 0

PDO::FETCH_OBJ : retourne un objet anonyme avec les noms de propriétés qui correspondent aux noms des colonnes retournés dans le jeu de résultats

    setFetchMode()

Il est également possible de déterminer lae mode de récupération par défaut de la requête à l'aide de la méthode setFetchMode()

http://fr2.php.net/manual/fr/pdostatement.setfetchmode.php
