<?php
/**
 * Manage News in the database using PDO objects.
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */
require_once('NewsManager.interface.php');

class PDONewsManager implements NewsManager
{

	/**
	 * Connection to MySQL database.
	 * @var PDO
	 * @access public
	 */
	public  $database;


    /**
     * @param PDO $database PDO connection to the MySQL database.
     */
    public function __construct(PDO $database)
    {
        $this->setDatabase($database);
    }


    /**
     * Establish the connection to the MySQL database.
     * @param PDO PDO connection to the MySQL database.
     */
    public function setDatabase(PDO $database)
    {
        $this->database = $database;
    }


    /**
     * Add a news in the database. Return true if operation succeed.
     * @access protected
     * @param News $news News to add.
     * @return bool
     */
    protected function add(News  $news) : bool
    {
        try {
            $query = $this->database->prepare('INSERT INTO news (author, title, content, dateAdded) VALUES (:author, :title, :content, NOW())');
            $query->bindValue(':author', $news->getAuthor(), PDO::PARAM_STR);
            $query->bindValue(':title', $news->getTitle(), PDO::PARAM_STR);
            $query->bindValue(':content', $news->getContent(), PDO::PARAM_STR);
            return $query->execute();
        } catch (PDOException $e) {
            return false;
        }
    }


    /**
     * Return a news from the database.
     * @access public
     * @param  int  $id of the news to return.
     * @return News
     */
    public function get(int $id): News
    {
        $query = $this->database->prepare('SELECT * FROM news WHERE id = :id');
        $query->bindValue(':id', $id, PDO::PARAM_INT);
        $query->execute();
        $query->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'News');
        $news = $query->fetch();
        $query->closeCursor();
        return $news;
    }


    /**
     * Return a list of news from the database ordered by creation date.
     * @access public
     * @param  int  $numberOfNews  Number of news to return.
     * @param  int  $startPosition Define at which position to start selecting news.
     * @return array Array of news.
     */
    public function getList(int $numberOfNews, int $startPosition) : array
    {
        /**
         * @var PDOStatement $newsArrayData
         */
        $newsArrayData = $this->database->query('SELECT * FROM news ORDER BY dateAdded');
        $newsArrayData->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'News');
        $newsArray = $newsArrayData->fetchAll();
        return $newsArray;
    }


    /**
     * Update a news in the database. Return true if operation succeed.
     * @access protected
     * @param  News    $news News to update.
     * @return bool
     */
    protected function update(News  $news) : bool
    {
        $this->database->prepare('UPDATE news (author, title, content, dateEdited) VALUES (:author, :title, :content, NOW()) WHERE id = :id');
    }


    /**
     * Delete a news in the database. Return true if operation succeed.
     * @access public
     * @param  News    $news News to delete.
     * @return bool
     */
    public function delete(News  $news) : bool
    {

    }


    /**
     * Save (add or update) a news in the database. Return true if operation succeed.
     * @param  News  $news News to save.
     * @return bool
     */
    public function save(News $news) : bool
    {
        # code...
    }

}
